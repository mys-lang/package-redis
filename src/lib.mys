from io.buffered_reader import BufferedReader
from net.tcp.client import Client as TcpClient

class RedisError(Error):
    message: string

@trait
class Message:
    """A received Pub/Sub message.

    """

class SubscribeMessage(Message):
    """A Pub/Sub subscribe reply message.

    """

    channel: string
    number_of_subscriptions: i64

class UnsubscribeMessage(Message):
    """An Pub/Sub unsubscribe reply message.

    """

    channel: string
    number_of_subscriptions: i64

class PublishMessage(Message):
    """A Pub/Sub published message.

    """

    channel: string
    payload: bytes

@trait
class Reply:
    """A command reply.

    """

class SimpleStringReply(Reply):
    """A simple string command reply.

    """

    value: string

class ErrorReply(Reply):
    """An error command reply.

    """

    error: string
    message: string

class IntegerReply(Reply):
    """An integer command reply.

    """

    value: i64

class BulkStringReply(Reply):
    """A bulk string command reply.

    """

    value: bytes

class ArrayReply(Reply):
    """An array command reply.

    """

    items: [Reply]

func _unpack_bulk_string(value: Reply, message: string) -> bytes:
    match value:
        case BulkStringReply() as bulk_string_reply:
            return bulk_string_reply.value
        case _:
            raise RedisError(message)

func _unpack_array(value: Reply, message: string) -> [Reply]:
    match value:
        case ArrayReply() as array_reply:
            return array_reply.items
        case _:
            raise RedisError(message)

func _unpack_integer(value: Reply, message: string) -> i64:
    match value:
        case IntegerReply() as integer_reply:
            return integer_reply.value
        case _:
            raise RedisError(message)

func _unpack_simple_string(value: Reply, message: string) -> string:
    match value:
        case SimpleStringReply() as simple_string_reply:
            return simple_string_reply.value
        case _:
            raise RedisError(message)

func _check_simple_string_reply(reply: string, expected: string):
    if reply != expected:
        raise RedisError(
            f"Unexpected simple string reply '{reply}' when expecting "
            f"'{expected}'.")

func _unpack_publish(channel: Reply, payload: Reply) -> PublishMessage:
    return PublishMessage(string(_unpack_bulk_string(channel, "No channel.")),
                          _unpack_bulk_string(payload, "No payload."))

func _unpack_subscribe(channel: Reply, count: Reply) -> SubscribeMessage:
    return SubscribeMessage(string(_unpack_bulk_string(channel, "No channel.")),
                            _unpack_integer(count, "No count."))

func _unpack_unsubscribe(channel: Reply, count: Reply) -> UnsubscribeMessage:
    return UnsubscribeMessage(string(_unpack_bulk_string(channel, "No channel.")),
                              _unpack_integer(count, "No count."))

class Client:
    """A Redis client.

    """

    _client: TcpClient
    _buffered_reader: BufferedReader

    func __init__(self):
        self._client = TcpClient()
        self._buffered_reader = BufferedReader(self._client)

    func connect(self, host: string = "127.0.0.1", port: u32 = 6379):
        """Connect to given server.

        """

        self._buffered_reader.clear()
        self._client.connect(host, port)

    func disconnect(self):
        """Disconnect from the server.

        """

        self._client.disconnect()

    func auth(self, password: string):
        """Authenticate.

        """

        self._call_simple_string_reply_ok([b"AUTH", password.to_utf8()])

    func del(self, key: string) -> i64:
        """Delete given key.

        """

        self.del_write(key)

        return self.del_read()

    func set(self, key: string, value: bytes):
        """Set given value for given key.

        """

        self.set_write(key, value)
        self.set_read()

    func get(self, key: string) -> bytes:
        """Get the value for given key.

        """

        self.get_write(key)

        return self.get_read()

    func getdel(self, key: string) -> bytes:
        """Get the value for given key and then delete it.

        """

        return self.call_bulk_string_reply([b"GETDEL", key.to_utf8()])

    func append(self, key: string, value: bytes) -> i64:
        """Append given value for given key.

        """

        return self.call_integer_reply([b"APPEND", key.to_utf8(), value])

    func incr(self, key: string) -> i64:
        """Increment the value for given key. Returns the value after the
        increment.

        """

        return self.call_integer_reply([b"INCR", key.to_utf8()])

    func decr(self, key: string) -> i64:
        """Decrement the value for given key. Returns the value after the
        decrement.

        """

        return self.call_integer_reply([b"DECR", key.to_utf8()])

    func strlen(self, key: string) -> i64:
        """Get the value length for given key.

        """

        return self.call_integer_reply([b"STRLEN", key.to_utf8()])

    func scan(self, cursor: i64, pattern: string) -> (i64, [string]):
        """Scan for matching keys.

        """

        reply = self.call(
            [b"SCAN", str(cursor).to_utf8(), b"MATCH", pattern.to_utf8()])
        reply_items = _unpack_array(reply, "Bad SCAN reply.")

        if len(reply_items) != 2:
            raise RedisError("Bad SCAN reply length.")

        keys = []
        cursor = i64(string(_unpack_bulk_string(reply_items[0],
                                                "Bad SCAN cursor.")))

        for item in _unpack_array(reply_items[1], "Bad SCAN keys."):
            keys.append(string(_unpack_bulk_string(item, "Bad SCAN key.")))

        return cursor, keys

    func lpush(self, key: string, value: bytes) -> i64:
        """Prepend given value for given list key.

        """

        return self.call_integer_reply([b"LPUSH", key.to_utf8(), value])

    func lpop(self, key: string) -> bytes:
        """Pop the first value for given list key.

        """

        return self.call_bulk_string_reply([b"LPOP", key.to_utf8()])

    func rpush(self, key: string, value: bytes) -> i64:
        """Append given value for given list key.

        """

        return self.call_integer_reply([b"RPUSH", key.to_utf8(), value])

    func rpop(self, key: string) -> bytes:
        """Pop the last value for given list key.

        """

        return self.call_bulk_string_reply([b"RPOP", key.to_utf8()])

    func hset(self, key: string, field: string, value: bytes) -> i64:
        """Set given field to given value for given hash key.

        """

        return self.call_integer_reply([b"HSET", key.to_utf8(), field.to_utf8(), value])

    func hget(self, key: string, field: string) -> bytes:
        """Get the value for given field for given hash key.

        """

        return self.call_bulk_string_reply([b"HGET", key.to_utf8(), field.to_utf8()])

    func hgetall(self, key: string) -> {string: bytes}:
        """Get all fields and valus for given hash key.

        """

        reply = self.call([b"HGETALL", key.to_utf8()])
        reply_items = _unpack_array(reply, "Bad hash type.")
        items: {string: bytes} = {}

        for i in range(0, i64(len(reply_items)), 2):
            field = string(_unpack_bulk_string(reply_items[i + 0],
                                               "Bad hash field type."))
            value = _unpack_bulk_string(reply_items[i + 1],
                                        "Bad hash value type.")
            items[field] = value

        return items

    func hdel(self, key: string, field: string) -> i64:
        """Delete given field for given hash key.

        """

        return self.call_integer_reply([b"HDEL", key.to_utf8(), field.to_utf8()])

    func publish(self, channel: string, message: bytes) -> i64:
        """Publish given message on given channel. Returns the number of
        clients that received the message.

        """

        return self.call_integer_reply([b"PUBLISH", channel.to_utf8(), message])

    func subscribe(self, channel: string):
        """Subscribe to given channel. May be called from any fiber, even
        if another fiber is waiting for a message.

        Call get_message() to get the next message.

        Only a limited set of commands are allowed once in Pub/Sub mode.

        """

        self._write_request([b"SUBSCRIBE", channel.to_utf8()])

    func unsubscribe(self, channel: string):
        """Unsubscribe from given channel. May be called from any fiber, even
        if another fiber is waiting for a message.

        """

        self._write_request([b"UNSUBSCRIBE", channel.to_utf8()])

    func psubscribe(self, pattern: string):
        """Subscribe to given pattern. May be called from any fiber, even
        if another fiber is waiting for a message.

        Call get_message() to get the next message.

        Only a limited set of commands are allowed once in Pub/Sub mode.

        """

        self._write_request([b"PSUBSCRIBE", pattern.to_utf8()])

    func punsubscribe(self, pattern: string):
        """Unsubscribe from given pattern. May be called from any fiber, even
        if another fiber is waiting for a message.

        """

        self._write_request([b"PUNSUBSCRIBE", pattern.to_utf8()])

    func get_message(self) -> Message:
        """Get the next Pub/Sub message. Blocks until a message is received.

        """

        items = _unpack_array(self._read_reply(), "Not a reply.")

        if len(items) < 3:
            raise RedisError("Message too short.")

        match _unpack_bulk_string(items[0], "No message kind."):
            case b"message":
                return _unpack_publish(items[1], items[2])
            case b"pmessage":
                if len(items) < 4:
                    raise RedisError("Message too short.")

                return _unpack_publish(items[2], items[3])
            case b"subscribe":
                return _unpack_subscribe(items[1], items[2])
            case b"unsubscribe":
                return _unpack_unsubscribe(items[1], items[2])
            case b"psubscribe":
                return _unpack_subscribe(items[1], items[2])
            case b"punsubscribe":
                return _unpack_unsubscribe(items[1], items[2])
            case _ as kind:
                raise RedisError(f"Invalid message kind '{kind}'.")

    func call(self, command: [bytes]) -> Reply:
        """Call given command.

        """

        self.call_write(command)

        return self.call_read()

    func call_integer_reply(self, command: [bytes]) -> i64:
        """Call given command and expect an integer (:) reply.

        """

        self._write_request(command)

        return _unpack_integer(self._read_reply_check_error(),
                               "Not an integer reply.")

    func call_bulk_string_reply(self, command: [bytes]) -> bytes:
        """Call given command and expect a bulk string ($) reply.

        """

        self._write_request(command)

        return self._read_bulk_string_reply_check_error()

    func call_simple_string_reply(self, command: [bytes]) -> string:
        """Call given command and expect a simple string (+) reply.

        """

        self._write_request(command)

        return self._read_simple_string_reply_check_error()

    func del_write(self, key: string):
        """Write pipelined delete given key.

        """

        self._write_request([b"DEL", key.to_utf8()])

    func del_read(self) -> i64:
        """Read pipelined delete given key.

        """

        return self._read_integer_reply_check_error()

    func set_write(self, key: string, value: bytes):
        """Write pipelined set given value for given key.

        """

        self._write_request([b"SET", key.to_utf8(), value])

    func set_read(self):
        """Read pipelined set given value for given key.

        """

        reply = self._read_simple_string_reply_check_error()
        _check_simple_string_reply(reply, "OK")

    func get_write(self, key: string):
        """Write pipelined get the value for given key.

        """

        self._write_request([b"GET", key.to_utf8()])

    func get_read(self) -> bytes:
        """Read pipelined get the value for given key.

        """

        return self._read_bulk_string_reply_check_error()

    func call_write(self, command: [bytes]):
        """Write pipelined call given command.

        """

        self._write_request(command)

    func call_read(self) -> Reply:
        """Read pipelined call given command.

        """

        return self._read_reply()

    func _write_request(self, command: [bytes]):
        request = f"*{len(command)}\r\n".to_utf8()

        for item in command:
            request += f"${len(item)}\r\n".to_utf8()
            request += item
            request += b"\r\n"

        self._client.write(request)

    func _read_reply(self) -> Reply:
        kind = self._buffered_reader.read(1)
        data = self._read_line()

        match kind:
            case b"-":
                error, _, message = string(data).partition(" ")

                return ErrorReply(error, message)
            case b"+":
                return SimpleStringReply(string(data))
            case b":":
                return IntegerReply(i64(string(data)))
            case b"$":
                length = i64(string(data))

                if length == -1:
                    return BulkStringReply(None)
                else:
                    return BulkStringReply(self._read_line())
            case b"*":
                length = i64(string(data))

                if length == -1:
                    return ArrayReply(None)
                else:
                    return ArrayReply([self._read_reply() for _ in range(length)])
            case _:
                raise RedisError(f"Invalid reply kind '{kind}'.")

    func _read_reply_check_error(self) -> Reply:
        reply = self._read_reply()

        match reply:
            case ErrorReply() as error_reply:
                raise RedisError(f"{error_reply.error}: {error_reply.message}")

        return reply

    func _read_bulk_string_reply_check_error(self) -> bytes:
        return _unpack_bulk_string(self._read_reply_check_error(),
                                   "Not a bulk string reply.")

    func _read_simple_string_reply_check_error(self) -> string:
        return _unpack_simple_string(self._read_reply_check_error(),
                                     "Not a simple string reply.")

    func _read_integer_reply_check_error(self) -> i64:
        return _unpack_integer(self._read_reply_check_error(),
                               "Not an integer reply.")

    func _call_simple_string_reply_ok(self, command: [bytes]):
        reply = self.call_simple_string_reply(command)
        _check_simple_string_reply(reply, "OK")

    func _read_line(self) -> bytes:
        line = self._buffered_reader.read_until(b"\r\n", keep_pattern=False)

        if line is None:
            raise RedisError("No line.")

        return line

@test
func test_string():
    client = Client()
    client.connect()
    client.del("foo")
    client.set("foo", b"")
    assert client.del("foo") == 1
    client.set("foo", b"\x00\x01\x02")
    assert client.get("foo") == b"\x00\x01\x02"
    assert client.strlen("foo") == 3
    assert client.append("foo", b"\x03\x04") == 5
    assert client.get("foo") == b"\x00\x01\x02\x03\x04"
    assert client.getdel("foo") == b"\x00\x01\x02\x03\x04"
    assert client.append("foo", b"\x00") == 1
    assert client.get("foo") == b"\x00"
    client.set("count", b"0")
    assert client.incr("count") == 1
    assert client.incr("count") == 2
    assert client.incr("count") == 3
    assert client.decr("count") == 2
    client.disconnect()

@test
func test_call():
    client = Client()
    client.connect()

    match client.call([b"SET", b"foo", b"\x31\x32"]):
        case SimpleStringReply() as reply:
            assert reply.value == "OK"
        case _:
            assert False

    match client.call([b"DEL", b"bar"]):
        case IntegerReply():
            pass
        case _:
            assert False

    match client.call([b"HSET", b"bar", b"k1", b"v1"]):
        case IntegerReply() as reply:
            assert reply.value == 1
        case _:
            assert False

    match client.call([b"HLEN", b"bar"]):
        case IntegerReply() as reply:
            assert reply.value == 1
        case _:
            assert False

    client.disconnect()

@test
func test_list():
    client = Client()
    client.connect()

    client.del("bar")

    assert client.lpush("bar", b"2") == 1
    assert client.lpush("bar", b"1") == 2
    assert client.rpush("bar", b"3") == 3

    assert client.lpop("bar") == b"1"
    assert client.lpop("bar") == b"2"
    assert client.rpop("bar") == b"3"

    client.disconnect()

@test
func test_hash():
    client = Client()
    client.connect()

    client.del("fie")

    assert client.hget("fie", "a") is None

    assert client.hset("fie", "a", b"x") == 1
    assert client.hset("fie", "b", b"y") == 1
    assert client.hset("fie", "c", b"z") == 1

    assert client.hget("fie", "a") == b"x"
    assert client.hget("fie", "b") == b"y"
    assert client.hget("fie", "c") == b"z"

    items = client.hgetall("fie")
    assert len(items) == 3
    assert items["a"] == b"x"
    assert items["b"] == b"y"
    assert items["c"] == b"z"

    assert client.hdel("fie", "b") == 1
    assert client.hdel("fie", "b") == 0

    assert client.hget("fie", "a") == b"x"
    assert client.hget("fie", "b") is None
    assert client.hget("fie", "c") == b"z"

    client.disconnect()

@test
func test_auth():
    client = Client()
    client.connect()

    try:
        message = ""
        client.auth("pass")
    except RedisError as error:
        message = error.message

    assert "ERR: AUTH" in message

    client.disconnect()

@test
func test_pub_sub():
    subscriber = Client()
    publisher = Client()

    subscriber.connect()
    publisher.connect()

    subscriber.subscribe("foo")

    match subscriber.get_message():
        case SubscribeMessage() as subscribe_message:
            assert subscribe_message.channel == "foo"
            assert subscribe_message.number_of_subscriptions == 1
        case _:
            assert False

    publisher.publish("foo", b"bar")

    match subscriber.get_message():
        case PublishMessage() as publish_message:
            assert publish_message.channel == "foo"
            assert publish_message.payload == b"bar"
        case _:
            assert False

    subscriber.psubscribe("foo*")

    match subscriber.get_message():
        case SubscribeMessage() as subscribe_message:
            assert subscribe_message.channel == "foo*"
            assert subscribe_message.number_of_subscriptions == 2
        case _:
            assert False

    subscriber.unsubscribe("foo")

    match subscriber.get_message():
        case UnsubscribeMessage() as unsubscribe_message:
            assert unsubscribe_message.channel == "foo"
            assert unsubscribe_message.number_of_subscriptions == 1
        case _:
            assert False

    publisher.publish("foo123", b"bar987")

    match subscriber.get_message():
        case PublishMessage() as publish_message:
            assert publish_message.channel == "foo123"
            assert publish_message.payload == b"bar987"
        case _:
            assert False

    subscriber.punsubscribe("foo*")

    match subscriber.get_message():
        case UnsubscribeMessage() as unsubscribe_message:
            assert unsubscribe_message.channel == "foo*"
            assert unsubscribe_message.number_of_subscriptions == 0
        case _:
            assert False

    subscriber.disconnect()
    publisher.disconnect()

@test
func test_wrong_reply():
    client = Client()
    client.connect()

    try:
        message = ""
        client.call_integer_reply([b"GET", b"foo"])
    except RedisError as error:
        message = error.message

    assert message == "Not an integer reply."

    try:
        message = ""
        client.call_bulk_string_reply([b"DEL", b"foo"])
    except RedisError as error:
        message = error.message

    assert message == "Not a bulk string reply."

    try:
        message = ""
        client.call_simple_string_reply([b"DEL", b"foo"])
    except RedisError as error:
        message = error.message

    assert message == "Not a simple string reply."

    client.disconnect()

@test
func test_string_pipeline():
    client = Client()
    client.connect()
    client.del("foo")

    client.set_write("foo", b"")
    client.del_write("foo")
    client.set_write("foo", b"\x00\x01\x02")
    client.get_write("foo")

    client.set_read()
    assert client.del_read() == 1
    client.set_read()
    assert client.get_read() == b"\x00\x01\x02"

    # assert client.strlen("foo") == 3
    # assert client.append("foo", b"\x03\x04") == 5
    # assert client.get("foo") == b"\x00\x01\x02\x03\x04"
    # assert client.getdel("foo") == b"\x00\x01\x02\x03\x04"
    # assert client.append("foo", b"\x00") == 1
    # assert client.get("foo") == b"\x00"
    # client.set("count", b"0")
    # assert client.incr("count") == 1
    # assert client.incr("count") == 2
    # assert client.incr("count") == 3
    # assert client.decr("count") == 2
    client.disconnect()

@test
func test_connect_disconnect():
    client = Client()
    client.connect()
    client.disconnect()
    client.disconnect()
    client.connect()
    client.connect()
